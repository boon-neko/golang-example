// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBookSubscription is an object representing the database table.
type UserBookSubscription struct {
	ID        int       `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	BookID    string    `boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *userBookSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBookSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBookSubscriptionColumns = struct {
	ID        string
	UserID    string
	BookID    string
	CreatedAt string
}{
	ID:        "uuid",
	UserID:    "user_id",
	BookID:    "book_id",
	CreatedAt: "created_at",
}

var UserBookSubscriptionTableColumns = struct {
	ID        string
	UserID    string
	BookID    string
	CreatedAt string
}{
	ID:        "user_book_subscription.uuid",
	UserID:    "user_book_subscription.user_id",
	BookID:    "user_book_subscription.book_id",
	CreatedAt: "user_book_subscription.created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserBookSubscriptionWhere = struct {
	ID        whereHelperint
	UserID    whereHelperstring
	BookID    whereHelperstring
	CreatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`user_book_subscription`.`uuid`"},
	UserID:    whereHelperstring{field: "`user_book_subscription`.`user_id`"},
	BookID:    whereHelperstring{field: "`user_book_subscription`.`book_id`"},
	CreatedAt: whereHelpernull_Time{field: "`user_book_subscription`.`created_at`"},
}

// UserBookSubscriptionRels is where relationship names are stored.
var UserBookSubscriptionRels = struct {
	Book string
	User string
}{
	Book: "Book",
	User: "User",
}

// userBookSubscriptionR is where relationships are stored.
type userBookSubscriptionR struct {
	Book *Book `boil:"Book" json:"Book" toml:"Book" yaml:"Book"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userBookSubscriptionR) NewStruct() *userBookSubscriptionR {
	return &userBookSubscriptionR{}
}

func (r *userBookSubscriptionR) GetBook() *Book {
	if r == nil {
		return nil
	}
	return r.Book
}

func (r *userBookSubscriptionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userBookSubscriptionL is where Load methods for each relationship are stored.
type userBookSubscriptionL struct{}

var (
	userBookSubscriptionAllColumns            = []string{"uuid", "user_id", "book_id", "created_at"}
	userBookSubscriptionColumnsWithoutDefault = []string{"user_id", "book_id"}
	userBookSubscriptionColumnsWithDefault    = []string{"uuid", "created_at"}
	userBookSubscriptionPrimaryKeyColumns     = []string{"uuid"}
	userBookSubscriptionGeneratedColumns      = []string{}
)

type (
	// UserBookSubscriptionSlice is an alias for a slice of pointers to UserBookSubscription.
	// This should almost always be used instead of []UserBookSubscription.
	UserBookSubscriptionSlice []*UserBookSubscription
	// UserBookSubscriptionHook is the signature for custom UserBookSubscription hook methods
	UserBookSubscriptionHook func(context.Context, boil.ContextExecutor, *UserBookSubscription) error

	userBookSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBookSubscriptionType                 = reflect.TypeOf(&UserBookSubscription{})
	userBookSubscriptionMapping              = queries.MakeStructMapping(userBookSubscriptionType)
	userBookSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(userBookSubscriptionType, userBookSubscriptionMapping, userBookSubscriptionPrimaryKeyColumns)
	userBookSubscriptionInsertCacheMut       sync.RWMutex
	userBookSubscriptionInsertCache          = make(map[string]insertCache)
	userBookSubscriptionUpdateCacheMut       sync.RWMutex
	userBookSubscriptionUpdateCache          = make(map[string]updateCache)
	userBookSubscriptionUpsertCacheMut       sync.RWMutex
	userBookSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBookSubscriptionAfterSelectMu sync.Mutex
var userBookSubscriptionAfterSelectHooks []UserBookSubscriptionHook

var userBookSubscriptionBeforeInsertMu sync.Mutex
var userBookSubscriptionBeforeInsertHooks []UserBookSubscriptionHook
var userBookSubscriptionAfterInsertMu sync.Mutex
var userBookSubscriptionAfterInsertHooks []UserBookSubscriptionHook

var userBookSubscriptionBeforeUpdateMu sync.Mutex
var userBookSubscriptionBeforeUpdateHooks []UserBookSubscriptionHook
var userBookSubscriptionAfterUpdateMu sync.Mutex
var userBookSubscriptionAfterUpdateHooks []UserBookSubscriptionHook

var userBookSubscriptionBeforeDeleteMu sync.Mutex
var userBookSubscriptionBeforeDeleteHooks []UserBookSubscriptionHook
var userBookSubscriptionAfterDeleteMu sync.Mutex
var userBookSubscriptionAfterDeleteHooks []UserBookSubscriptionHook

var userBookSubscriptionBeforeUpsertMu sync.Mutex
var userBookSubscriptionBeforeUpsertHooks []UserBookSubscriptionHook
var userBookSubscriptionAfterUpsertMu sync.Mutex
var userBookSubscriptionAfterUpsertHooks []UserBookSubscriptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserBookSubscription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserBookSubscription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserBookSubscription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserBookSubscription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserBookSubscription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserBookSubscription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserBookSubscription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserBookSubscription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserBookSubscription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookSubscriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserBookSubscriptionHook registers your hook function for all future operations.
func AddUserBookSubscriptionHook(hookPoint boil.HookPoint, userBookSubscriptionHook UserBookSubscriptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userBookSubscriptionAfterSelectMu.Lock()
		userBookSubscriptionAfterSelectHooks = append(userBookSubscriptionAfterSelectHooks, userBookSubscriptionHook)
		userBookSubscriptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userBookSubscriptionBeforeInsertMu.Lock()
		userBookSubscriptionBeforeInsertHooks = append(userBookSubscriptionBeforeInsertHooks, userBookSubscriptionHook)
		userBookSubscriptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userBookSubscriptionAfterInsertMu.Lock()
		userBookSubscriptionAfterInsertHooks = append(userBookSubscriptionAfterInsertHooks, userBookSubscriptionHook)
		userBookSubscriptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userBookSubscriptionBeforeUpdateMu.Lock()
		userBookSubscriptionBeforeUpdateHooks = append(userBookSubscriptionBeforeUpdateHooks, userBookSubscriptionHook)
		userBookSubscriptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userBookSubscriptionAfterUpdateMu.Lock()
		userBookSubscriptionAfterUpdateHooks = append(userBookSubscriptionAfterUpdateHooks, userBookSubscriptionHook)
		userBookSubscriptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userBookSubscriptionBeforeDeleteMu.Lock()
		userBookSubscriptionBeforeDeleteHooks = append(userBookSubscriptionBeforeDeleteHooks, userBookSubscriptionHook)
		userBookSubscriptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userBookSubscriptionAfterDeleteMu.Lock()
		userBookSubscriptionAfterDeleteHooks = append(userBookSubscriptionAfterDeleteHooks, userBookSubscriptionHook)
		userBookSubscriptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userBookSubscriptionBeforeUpsertMu.Lock()
		userBookSubscriptionBeforeUpsertHooks = append(userBookSubscriptionBeforeUpsertHooks, userBookSubscriptionHook)
		userBookSubscriptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userBookSubscriptionAfterUpsertMu.Lock()
		userBookSubscriptionAfterUpsertHooks = append(userBookSubscriptionAfterUpsertHooks, userBookSubscriptionHook)
		userBookSubscriptionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userBookSubscription record from the query using the global executor.
func (q userBookSubscriptionQuery) OneG(ctx context.Context) (*UserBookSubscription, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single userBookSubscription record from the query using the global executor, and panics on error.
func (q userBookSubscriptionQuery) OneGP(ctx context.Context) *UserBookSubscription {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single userBookSubscription record from the query, and panics on error.
func (q userBookSubscriptionQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *UserBookSubscription {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userBookSubscription record from the query.
func (q userBookSubscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBookSubscription, error) {
	o := &UserBookSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for user_book_subscription")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserBookSubscription records from the query using the global executor.
func (q userBookSubscriptionQuery) AllG(ctx context.Context) (UserBookSubscriptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all UserBookSubscription records from the query using the global executor, and panics on error.
func (q userBookSubscriptionQuery) AllGP(ctx context.Context) UserBookSubscriptionSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all UserBookSubscription records from the query, and panics on error.
func (q userBookSubscriptionQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserBookSubscriptionSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserBookSubscription records from the query.
func (q userBookSubscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBookSubscriptionSlice, error) {
	var o []*UserBookSubscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to UserBookSubscription slice")
	}

	if len(userBookSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserBookSubscription records in the query using the global executor
func (q userBookSubscriptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all UserBookSubscription records in the query using the global executor, and panics on error.
func (q userBookSubscriptionQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all UserBookSubscription records in the query, and panics on error.
func (q userBookSubscriptionQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserBookSubscription records in the query.
func (q userBookSubscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count user_book_subscription rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userBookSubscriptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q userBookSubscriptionQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userBookSubscriptionQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userBookSubscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if user_book_subscription exists")
	}

	return count > 0, nil
}

// Book pointed to by the foreign key.
func (o *UserBookSubscription) Book(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`uuid` = ?", o.BookID),
	}

	queryMods = append(queryMods, mods...)

	return Books(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserBookSubscription) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`uuid` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadBook allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookSubscriptionL) LoadBook(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBookSubscription interface{}, mods queries.Applicator) error {
	var slice []*UserBookSubscription
	var object *UserBookSubscription

	if singular {
		var ok bool
		object, ok = maybeUserBookSubscription.(*UserBookSubscription)
		if !ok {
			object = new(UserBookSubscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBookSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBookSubscription))
			}
		}
	} else {
		s, ok := maybeUserBookSubscription.(*[]*UserBookSubscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBookSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBookSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBookSubscriptionR{}
		}
		args[object.BookID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookSubscriptionR{}
			}

			args[obj.BookID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`books`),
		qm.WhereIn(`books.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Book = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.UserBookSubscriptions = append(foreign.R.UserBookSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookID == foreign.ID {
				local.R.Book = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.UserBookSubscriptions = append(foreign.R.UserBookSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookSubscriptionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBookSubscription interface{}, mods queries.Applicator) error {
	var slice []*UserBookSubscription
	var object *UserBookSubscription

	if singular {
		var ok bool
		object, ok = maybeUserBookSubscription.(*UserBookSubscription)
		if !ok {
			object = new(UserBookSubscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBookSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBookSubscription))
			}
		}
	} else {
		s, ok := maybeUserBookSubscription.(*[]*UserBookSubscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBookSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBookSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBookSubscriptionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookSubscriptionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserBookSubscriptions = append(foreign.R.UserBookSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserBookSubscriptions = append(foreign.R.UserBookSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// SetBookG of the userBookSubscription to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.UserBookSubscriptions.
// Uses the global database handle.
func (o *UserBookSubscription) SetBookG(ctx context.Context, insert bool, related *Book) error {
	return o.SetBook(ctx, boil.GetContextDB(), insert, related)
}

// SetBookP of the userBookSubscription to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.UserBookSubscriptions.
// Panics on error.
func (o *UserBookSubscription) SetBookP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) {
	if err := o.SetBook(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBookGP of the userBookSubscription to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.UserBookSubscriptions.
// Uses the global database handle and panics on error.
func (o *UserBookSubscription) SetBookGP(ctx context.Context, insert bool, related *Book) {
	if err := o.SetBook(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBook of the userBookSubscription to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.UserBookSubscriptions.
func (o *UserBookSubscription) SetBook(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_book_subscription` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"book_id"}),
		strmangle.WhereClause("`", "`", 0, userBookSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookID = related.ID
	if o.R == nil {
		o.R = &userBookSubscriptionR{
			Book: related,
		}
	} else {
		o.R.Book = related
	}

	if related.R == nil {
		related.R = &bookR{
			UserBookSubscriptions: UserBookSubscriptionSlice{o},
		}
	} else {
		related.R.UserBookSubscriptions = append(related.R.UserBookSubscriptions, o)
	}

	return nil
}

// SetUserG of the userBookSubscription to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBookSubscriptions.
// Uses the global database handle.
func (o *UserBookSubscription) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUserP of the userBookSubscription to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBookSubscriptions.
// Panics on error.
func (o *UserBookSubscription) SetUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the userBookSubscription to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBookSubscriptions.
// Uses the global database handle and panics on error.
func (o *UserBookSubscription) SetUserGP(ctx context.Context, insert bool, related *User) {
	if err := o.SetUser(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the userBookSubscription to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBookSubscriptions.
func (o *UserBookSubscription) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_book_subscription` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userBookSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userBookSubscriptionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserBookSubscriptions: UserBookSubscriptionSlice{o},
		}
	} else {
		related.R.UserBookSubscriptions = append(related.R.UserBookSubscriptions, o)
	}

	return nil
}

// UserBookSubscriptions retrieves all the records using an executor.
func UserBookSubscriptions(mods ...qm.QueryMod) userBookSubscriptionQuery {
	mods = append(mods, qm.From("`user_book_subscription`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_book_subscription`.*"})
	}

	return userBookSubscriptionQuery{q}
}

// FindUserBookSubscriptionG retrieves a single record by ID.
func FindUserBookSubscriptionG(ctx context.Context, iD int, selectCols ...string) (*UserBookSubscription, error) {
	return FindUserBookSubscription(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUserBookSubscriptionP retrieves a single record by ID with an executor, and panics on error.
func FindUserBookSubscriptionP(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) *UserBookSubscription {
	retobj, err := FindUserBookSubscription(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserBookSubscriptionGP retrieves a single record by ID, and panics on error.
func FindUserBookSubscriptionGP(ctx context.Context, iD int, selectCols ...string) *UserBookSubscription {
	retobj, err := FindUserBookSubscription(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserBookSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBookSubscription(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserBookSubscription, error) {
	userBookSubscriptionObj := &UserBookSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_book_subscription` where `uuid`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userBookSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from user_book_subscription")
	}

	if err = userBookSubscriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userBookSubscriptionObj, err
	}

	return userBookSubscriptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserBookSubscription) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserBookSubscription) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserBookSubscription) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBookSubscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no user_book_subscription provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBookSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBookSubscriptionInsertCacheMut.RLock()
	cache, cached := userBookSubscriptionInsertCache[key]
	userBookSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBookSubscriptionAllColumns,
			userBookSubscriptionColumnsWithDefault,
			userBookSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBookSubscriptionType, userBookSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBookSubscriptionType, userBookSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_book_subscription` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_book_subscription` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_book_subscription` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userBookSubscriptionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into user_book_subscription")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userBookSubscriptionMapping["uuid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for user_book_subscription")
	}

CacheNoHooks:
	if !cached {
		userBookSubscriptionInsertCacheMut.Lock()
		userBookSubscriptionInsertCache[key] = cache
		userBookSubscriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserBookSubscription record using the global executor.
// See Update for more documentation.
func (o *UserBookSubscription) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the UserBookSubscription, and panics on error.
// See Update for more documentation.
func (o *UserBookSubscription) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single UserBookSubscription record using the global executor. Panics on error.
// See Update for more documentation.
func (o *UserBookSubscription) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserBookSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBookSubscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userBookSubscriptionUpdateCacheMut.RLock()
	cache, cached := userBookSubscriptionUpdateCache[key]
	userBookSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBookSubscriptionAllColumns,
			userBookSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update user_book_subscription, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_book_subscription` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userBookSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBookSubscriptionType, userBookSubscriptionMapping, append(wl, userBookSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update user_book_subscription row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for user_book_subscription")
	}

	if !cached {
		userBookSubscriptionUpdateCacheMut.Lock()
		userBookSubscriptionUpdateCache[key] = cache
		userBookSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userBookSubscriptionQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q userBookSubscriptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q userBookSubscriptionQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userBookSubscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for user_book_subscription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for user_book_subscription")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserBookSubscriptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserBookSubscriptionSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserBookSubscriptionSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBookSubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_book_subscription` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userBookSubscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in userBookSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all userBookSubscription")
	}
	return rowsAff, nil
}

// DeleteG deletes a single UserBookSubscription record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserBookSubscription) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single UserBookSubscription record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserBookSubscription) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single UserBookSubscription record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserBookSubscription) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserBookSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBookSubscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no UserBookSubscription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBookSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM `user_book_subscription` WHERE `uuid`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from user_book_subscription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for user_book_subscription")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userBookSubscriptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q userBookSubscriptionQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q userBookSubscriptionQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userBookSubscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no userBookSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from user_book_subscription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for user_book_subscription")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserBookSubscriptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserBookSubscriptionSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserBookSubscriptionSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBookSubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBookSubscriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_book_subscription` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userBookSubscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from userBookSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for user_book_subscription")
	}

	if len(userBookSubscriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserBookSubscription) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: no UserBookSubscription provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserBookSubscription) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserBookSubscription) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBookSubscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBookSubscription(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBookSubscriptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodel: empty UserBookSubscriptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserBookSubscriptionSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserBookSubscriptionSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBookSubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBookSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_book_subscription`.* FROM `user_book_subscription` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userBookSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in UserBookSubscriptionSlice")
	}

	*o = slice

	return nil
}

// UserBookSubscriptionExistsG checks if the UserBookSubscription row exists.
func UserBookSubscriptionExistsG(ctx context.Context, iD int) (bool, error) {
	return UserBookSubscriptionExists(ctx, boil.GetContextDB(), iD)
}

// UserBookSubscriptionExistsP checks if the UserBookSubscription row exists. Panics on error.
func UserBookSubscriptionExistsP(ctx context.Context, exec boil.ContextExecutor, iD int) bool {
	e, err := UserBookSubscriptionExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserBookSubscriptionExistsGP checks if the UserBookSubscription row exists. Panics on error.
func UserBookSubscriptionExistsGP(ctx context.Context, iD int) bool {
	e, err := UserBookSubscriptionExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserBookSubscriptionExists checks if the UserBookSubscription row exists.
func UserBookSubscriptionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_book_subscription` where `uuid`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if user_book_subscription exists")
	}

	return exists, nil
}

// Exists checks if the UserBookSubscription row exists.
func (o *UserBookSubscription) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBookSubscriptionExists(ctx, exec, o.ID)
}

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserBookSubscriptionSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(userBookSubscriptionColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			userBookSubscriptionAllColumns,
			userBookSubscriptionColumnsWithDefault,
			userBookSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `user_book_subscription` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userBookSubscriptionType, userBookSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into user_book_subscription")
	}

	return nil
}
